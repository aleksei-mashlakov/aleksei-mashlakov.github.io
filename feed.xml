<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://aleksei-mashlakov.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aleksei-mashlakov.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-05T08:40:18+00:00</updated><id>https://aleksei-mashlakov.github.io/feed.xml</id><title type="html">blank</title><subtitle>A trailblazer stroll in pursuit of energy flexibility. </subtitle><entry><title type="html">Never Have I Ever … Won M6 competition?</title><link href="https://aleksei-mashlakov.github.io/blog/2023/never-have-i-ever-won-m6-competition/" rel="alternate" type="text/html" title="Never Have I Ever … Won M6 competition?"/><published>2023-02-21T23:25:09+00:00</published><updated>2023-02-21T23:25:09+00:00</updated><id>https://aleksei-mashlakov.github.io/blog/2023/never-have-i-ever-won-m6-competition</id><content type="html" xml:base="https://aleksei-mashlakov.github.io/blog/2023/never-have-i-ever-won-m6-competition/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Never Have I Ever … Won M6 competition?</title><link href="https://aleksei-mashlakov.github.io/blog/2023/m6competition/" rel="alternate" type="text/html" title="Never Have I Ever … Won M6 competition?"/><published>2023-02-20T00:00:00+00:00</published><updated>2023-02-20T00:00:00+00:00</updated><id>https://aleksei-mashlakov.github.io/blog/2023/m6competition</id><content type="html" xml:base="https://aleksei-mashlakov.github.io/blog/2023/m6competition/"><![CDATA[<div class="row justify-content-sm-center"> <div class="col-sm-6 mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/m6_competition/m6competition-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/m6_competition/m6competition-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/m6_competition/m6competition-1400.webp"/> <img src="/assets/img/m6_competition/m6competition.jpg" class="img-fluid rounded z-depth-1" width="700" height="200" title="Trading chart as green and red waves. Generated by DALLE-II" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Trading chart as green and red waves. Generated by DALLE-II </div> <h1 id="introduction">Introduction</h1> <h2 id="m-series-competition">M-series competition</h2> <p><strong>M-series competition</strong> <d-footnote> M comes from the surname of the organizer, Spyros Makridakis</d-footnote> dates back to 1982, when the first M competition was held. The competition was designed to test the forecasting skills of the participants and provide world wide benchmarking of the forecasting models. Since then, in total five competitions were completed focusing into different application domain (retail, micro, industry, finance, etc.), time frames (from hourly to yearly), and types of forecasting problems (point, probabilistic, multivariate forecasting and so on). This long history made the M-series competition somewhat legendary in the forecasting community<d-footnote>The datasets of the previous competitions are available on the [here](https://forecasters.org/resources/time-series-data/)</d-footnote>.</p> <h2 id="m6-competition">M6 Competition</h2> <p><strong>The M6 competition</strong> is a live financial forecasting competition that started in February 2022, and ended a year later in 2023. The competition followed <code class="language-plaintext highlighter-rouge">duathlon</code> approach consisting of forecasting and investment tracks. For each track, the participants needed to submit (i) forecasts and (ii) investment decisions at each successive monthly submission point. The submission included forecasts and your investment strategy over the next four week period (normally 20 trading days). The competition data consisted from a universe of 50 S&amp;P500 stocks and 50 ETFs, covering a variety of asset categories.</p> <p>The forecasting performance for a particular submission point was measured by the <strong>Ranked Probability Score (RPS)</strong>. The score evaluated the skills of the forecasting models to predict the ranking, from 1 (worst performing) to 5 (best performing), of realised percentage total returns of all assets (stocks and ETFs) over the forecasting period. The performance of the investment decisions was measured by means of a variant of the <strong>Information Ratio (IR)</strong>, defined as the ratio of the portfolio return, <em>ret</em>, to the standard deviation of the portfolio return, <em>sdp</em>. Namely, risk adjusted returns are defined as \(IR = {ret}/{sdp}\). More details on the rules of the competition are available in <a href="https://mofc.unic.ac.cy/wp-content/uploads/2022/02/M6-Guidelines-1.pdf">guidlines</a>.</p> <p>My journey in the M6 competition started in January 2022, when I first heard about the competition. I considered the competition as a good sandbox to test my forecasting and optimization skills and hopefully build on it further learning from the best in the field. The beginning of the competition coincided with my moving process from a PhD life to an industry job in Belgium. Thanks to Belgian bureaucracy, I had some time in the beginning of the competition to experiment but later in time I felt into more straightforward <code class="language-plaintext highlighter-rouge">let-see-what-I-can-do-the-day-before-the-submission</code> approach. Nevertheless, It was fun and I learned a lot. I hope that this post will be compelling for other participants of the competition and for the readers in general.</p> <blockquote> Disclaimer: I had close-to-zero knowledge of financial markets at the start, so please take my comments with a grain of salt. Actually, the team names says it all: AM naïve. </blockquote> <h1 id="forecasting">Forecasting</h1> <p>I had big hopes for the forecasting track but the first results were not promising. At first, I was experimenting with statistical models using <a href="https://unit8co.github.io/darts/">Darts</a> python library. The method was to find a <strong>local</strong> (one model - one target time series) or <strong>global</strong> (one model - multiple target time series) model that would provide the asset return forecast over 20 days horizon. Normally, the base mode was Lasso or Ridge model. Then I used the quantiles of the forecasting residuals to define the rank of the time series. This approach was very naive and way far from the top. Actually, one of the reasons was the wrong interpretation of the rules how ranking is done. For some reason, I thought that the ranking among the ETF and stock classes should be different.</p> <p>The first failures motivated me to go to the extreme. It was a time of <strong>Deep Learning</strong> and <strong>Transformer</strong> models. I modified the <strong>Temporal Fusion Transformer</strong> from <a href="https://pytorch-forecasting.readthedocs.io/en/stable/index.html">pytorch-forecasting</a> library to predict the quantiles the assets for the next 20 days. Although the results improved, the benchmark was not overcomed. Somewhere at this stage I switched to the investment part of the competition because I got some chances to win the quarterly prize. So, for some months I used the benchmark submission before I came back to the forecasting track with an idea of <strong>Multivariate Convolutional Neural Network</strong>, where instead of images at specific channels I used multivariate time series data of the assets. In contrast to the case with the transformer, the model would directly predict the quantiles of the assets in 20 days from now and possible reduce error accumulation. However, no luck with this model as well.</p> <p>In the end, it was a question of honor to beat the benchmark (the score of the benchmark is 0.16) before the end of the competition. To do so, I decided to use the superpower of all Kagglers – <strong>LightGBM</strong> model. The idea was to use the LightGBM model as a <strong>multi-class classification</strong> model to predict the asset ranking in 20 days. Interestingly, the #2 place of the competition also used the decision tree but with multi-label classification. Read why it was preferred over multi-class classification in <a href="https://miguelpmich.medium.com/finqboost-machine-learning-for-portfolio-forecasting-55e62b00ebca">Miguel Perez Michaus post</a>. To calibrate the probabilities of a given model, I’ve applied an isotonic recalibration combined with time series cross validation.</p> <p>Did it work? This solution actually made my dream come true and I was able to beat the benchmark. I finished 16th out of 223 in the forecasting track in Quarter 4 of the competition. However, I was curious if this model could actually let me win the whole competition conditioned that I was using it from the beginning. So I decided to backtest the model and see how it would perform.</p> <h2 id="backtesting-lightgbm">Backtesting LightGBM</h2> <p>The benchmarking was done with LightGBM without calibration as using the latter gave slightly worse performance results. The backtesting suggests that LightGBN would achieve 0.157623 in RPS. This score would allow me to finish in top 10 of the forecasting track. Below, you can see that the backtesting results per month and quarter. The divergence between the train and test results suggest that the model has overfitting issues that could have been dealt with. However, the model was not tuned and the main goal was to see if the model could be competitive.</p> <div class="l-body"> <iframe src="/assets/img/m6_competition/rps_monthly_backtest.html" frameborder="0" scrolling="no" height="400px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <div class="l-body"> <iframe src="/assets/img/m6_competition/rps_quarterly_backtest.html" frameborder="0" scrolling="no" height="400px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <h2 id="feature-importance">Feature importance</h2> <p>Another interesting thing for me was to look at the features that the model found useful. Overall, I used the following features:</p> <ul> <li>Custom trading strategy with several indexes (SMA, EMA, RSI, MACD, etc.)</li> <li>Features based on the transformation of stock prices, volumes</li> <li>Categorical features based on the ticker properties (sector, industry, etc.)</li> <li>One hot encodings of holidays</li> <li>Spline of day of the week</li> <li>Kernels for holidays</li> </ul> <p>Below, you can see the feature importance by split and gain. In both cases, the most important time series features were Simple Moving Average of trading Volume over 20 days, Cumulative Percentage Returns over 20 days, and Logarithmic Return over 20 days. The most important categorical features were asset class and asset type.</p> <div class="l-body"> <iframe src="/assets/img/m6_competition/lgbm_feature_importance_by_gain.html" frameborder="0" scrolling="no" height="400px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <div class="l-body"> <iframe src="/assets/img/m6_competition/lgbm_feature_importance_by_split.html" frameborder="0" scrolling="no" height="400px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <h1 id="investment">Investment</h1> <p>In the first quarter, simple method was used of minimizing risk with a given minimal level of returns. This method showed good results during the pilot submission but later providing mostly negative IR. At this stage, I have used the residuals of the forecasting model for the covariance matrix and mean values. Disappointed by the results, I came across <a href="https://riskfolio-lib.readthedocs.io/en/latest/index.html">Riskfolio-Lib</a>. The library is amazing but without a good understanding of the theory behind the methods, it is hard to use it. So, my solution to this dilemma was to use the library as a black box and try to find the optimization method that provides the best investment returns. The summary of the approach you can see below.</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/m6_competition/M6_Portfolio-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/m6_competition/M6_Portfolio-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/m6_competition/M6_Portfolio-1400.webp"/> <img src="/assets/img/m6_competition/M6_Portfolio.png" class="img-fluid rounded z-depth-1" width="700" height="300" title="Auto ML approach to investment optimization" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Auto ML approach to investment optimization </div> <p>The first attempt was a failure, strictly speaking. I finished second … from the bottom. On the day of the submission for the next month #4 I was doing some adjustments and missed the deadline by several minutes. That was an unpleasant experience. However, as they say <code class="language-plaintext highlighter-rouge">everything is all for the best</code>. Luckily, the rules of the competition are such that if you miss the submission, the results from the previous month are forwarded to the next. To my surprise, the solution that was the second from the bottom in month #3 became the first in month #4. At this moment, I felt that there is some chance to win something so I decided to push more effort into the investment part of the competition. I kept 11th in the month #5 but fell to #162 in the month #6 going below zero IR. In the next quarter, I started promising by finishing #17 in month #7 and #7 in month #8. However, month #9 was unlucky for me as I finished #162. Unfortunately, two good months and one extremely bad month dropped me at #24 place in Q3 quarter.</p> <p>For the last quarter, I have noticed that there is a seasonality in the 20 days returns as shown in the figure below. So, I have tried to use the estimated trend in the portfolio optimization by training the portfolio on the months with same dynamics as the current month. However, this approach did not work well for me as I finished #152 in Q4 with negative IR.</p> <div class="row justify-content-sm-center"> <div class="col-sm-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/m6_competition/tickers-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/m6_competition/tickers-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/m6_competition/tickers-1400.webp"/> <img src="/assets/img/m6_competition/tickers.png" class="img-fluid rounded z-depth-1" width="800" height="400" title="M6 competition tickers" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> M6 competition tickers </div> <p>Looking back at the relative success (luck?) of the investment part for me, I think one of the reasons for good IR in Q2 and Q3 was the fact the ratio of short positions over long was prevailing in my portfolio. So these summer months were aligned with my strategy. The portfolios for the second quarter are shown below.</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/m6_competition/m6_competition_portfolio_m4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/m6_competition/m6_competition_portfolio_m4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/m6_competition/m6_competition_portfolio_m4-1400.webp"/> <img src="/assets/img/m6_competition/m6_competition_portfolio_m4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="M6 competition portfolio month 4" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/m6_competition/m6_competition_portfolio_m5-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/m6_competition/m6_competition_portfolio_m5-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/m6_competition/m6_competition_portfolio_m5-1400.webp"/> <img src="/assets/img/m6_competition/m6_competition_portfolio_m5.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="M6 competition portfolio month 5" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/m6_competition/m6_competition_portfolio_m6-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/m6_competition/m6_competition_portfolio_m6-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/m6_competition/m6_competition_portfolio_m6-1400.webp"/> <img src="/assets/img/m6_competition/m6_competition_portfolio_m6.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="M6 competition portfolio month 6" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> My portfolio in Q2 of M6 competition </div> <h1 id="conclusion">Conclusion</h1> <p>The competition was an amazing experience that kept me excited during the whole year. I thank the organizers for a wonderful competition and their efforts. One drawback for me is that despite more than 200 teams participated in the competition, the community was less active than I had expected or you could see on Kaggle. However, the good thing is that you can read the stories of the other participants here:</p> <ul> <li><a href="https://medium.com/geekculture/the-options-market-beat-94-of-participants-in-the-m6-financial-forecasting-contest-fa4f47f57d33">The Options Market Beat 97.6% of Participants in the M6 Financial Forecasting Contest</a></li> <li><a href="https://miguelpmich.medium.com/finqboost-machine-learning-for-portfolio-forecasting-55e62b00ebca">FinQBoost: Machine Learning for Portfolio Forecasting</a></li> <li><a href="https://m-e-gorelli.medium.com/how-i-won-6-000-in-the-m6-forecasting-competition-888df68bf132">How I won $6,000 in the M6 Forecasting Competition</a></li> </ul> <p>The code for this post and my solution is available on <a href="https://github.com/aleksei-mashlakov/m6_competition">github</a>:</p> <p><a href="https://lbesson.mit-license.org/"><img src="https://img.shields.io/badge/License-MIT-blue.svg?style=plastic" alt="Generic badge"/></a> <a href="https://github.com/aleksei-mashlakov/m6_competition"><img src="https://img.shields.io/badge/acces_au_code-github-black.svg?style=plastic&amp;logo=github" alt="Generic badge"/></a></p>]]></content><author><name>Aleksei Mashlakov</name></author><category term="forecasting, optimization, competition"/><summary type="html"><![CDATA[My naïve year-long journey to the M6 competition]]></summary></entry><entry><title type="html">Exploratory data analysis of mutivariate time series data</title><link href="https://aleksei-mashlakov.github.io/blog/2023/exploratory-data-analysis-of-mutivariate-time-series-data/" rel="alternate" type="text/html" title="Exploratory data analysis of mutivariate time series data"/><published>2023-02-13T23:15:57+00:00</published><updated>2023-02-13T23:15:57+00:00</updated><id>https://aleksei-mashlakov.github.io/blog/2023/exploratory-data-analysis-of-mutivariate-time-series-data</id><content type="html" xml:base="https://aleksei-mashlakov.github.io/blog/2023/exploratory-data-analysis-of-mutivariate-time-series-data/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Exploratory data analysis of mutivariate time series data</title><link href="https://aleksei-mashlakov.github.io/blog/2023/visualisation/" rel="alternate" type="text/html" title="Exploratory data analysis of mutivariate time series data"/><published>2023-02-05T00:00:00+00:00</published><updated>2023-02-05T00:00:00+00:00</updated><id>https://aleksei-mashlakov.github.io/blog/2023/visualisation</id><content type="html" xml:base="https://aleksei-mashlakov.github.io/blog/2023/visualisation/"><![CDATA[<p>This post describes the types of visualisation for exploratory multivariate time series analysis and provides code snippets of such visualisations using <a href="https://plotly.com/python/">Plotly</a> python library.</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/backgrounds/data_space_time-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/backgrounds/data_space_time-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/backgrounds/data_space_time-1400.webp"/> <img src="/assets/img/backgrounds/data_space_time.png" class="img-fluid rounded z-depth-1" width="700" height="300" title="A 3D render of data varying in space and time. Generated by DALL-E-II" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A 3D render of data varying in space and time. Generated by DALL-E-II </div> <h2 id="motivation">Motivation</h2> <blockquote> <p>“There’s nothing like seeing for oneself”. ― Japanese proverb</p> </blockquote> <h3 id="exploratory-multivariate-data-analysis">Exploratory multivariate data analysis</h3> <p><strong>Multivariate time series data</strong> refers to a set of observations of multiple variables measured over time. It is a type of data that is characterized by multiple variables recorded at regular intervals, such as daily, weekly, or monthly. In contrast to univariate time series data, which only contains observations for a single variable, multivariate time series data contains observations for multiple variables. For example, a multivariate time series dataset might contain observations of temperature, rainfall, and wind speed recorded daily for a particular region or multiple areas over the course of several years. Each observation in the dataset would contain values for all three variables at a given time, and the data would be ordered by time.</p> <p><strong>Exploratory multivariate data analysis</strong> is a type of statistical analysis that aims to summarize, visualize and understand complex relationships among multiple variables in a dataset. The goal of exploratory multivariate data analysis is to uncover patterns, relationships, and insights that may not be evident or hard to get from univariate or bivariate analyses. This analysis helps to identify patterns, relationships, and anomalies that are specific to certain variables and time periods.</p> <h3 id="multivariate-time-series-visualization">Multivariate time series visualization</h3> <p><strong>Visualization</strong> is an important tool for exploratory data analysis as it allows for the effective representation and communication of complex data sets. By using various types of charts, graphs, and maps, data analysts can do two major things:</p> <ol> <li><em>identify patterns and trends within the data</em>, and make informed decisions based on that information.</li> <li><em>communicate data insights to others</em>, making it an effective way to share findings and collaborate on data-driven projects.</li> </ol> <p>Visualization is particularly relevant to multivariate time series analysis, as it allows for the simultaneous examination of multiple variables over time. By using line charts, scatter plots, or heat maps, data analysts can easily identify patterns and relationships between different variables, and understand how they change over time. This is especially useful when working with large and complex data sets, as it can be difficult to make sense of the data without some form of visual representation.</p> <p>Overall, the ability to effectively visualize data can greatly enhance the efficiency and effectiveness of data analysis, and is a valuable skill for any data professional to possess.</p> <h3 id="types-of-exploratory-analysis">Types of exploratory analysis</h3> <p>The exploratory data analysis of multivariate data can be categorized to the following visualization types that are explored in this post:</p> <ul> <li><a href="#distributional-analysis"><strong>Distributional analysis</strong></a></li> <li><a href="#temporal-analysis"><strong>Temporal analysis</strong></a></li> <li><a href="#spatial-analysis"><strong>Spatial analysis</strong></a></li> </ul> <p>Before diving into each category, let’s prepare the dataset for the visualisation examples.</p> <h2 id="data">Data</h2> <p>The exploratory data analysis can be applied to a wide range of data, such as environmental data, energy data, social data, financial data, and more. In this post, the financial data from the latest <a href="https://m6competition.com/">M6 Financial Forecasting Competition</a> are used:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">yfinance</span> <span class="k">as</span> <span class="n">yf</span>

<span class="c1">#The M6 asset universe
</span><span class="n">assets</span> <span class="o">=</span> <span class="p">[</span>
  <span class="sh">"</span><span class="s">ABBV</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">ACN</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">AEP</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">AIZ</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">ALLE</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">AMAT</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">AMP</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">AMZN</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">AVB</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">AVY</span><span class="sh">"</span><span class="p">,</span>
  <span class="sh">"</span><span class="s">AXP</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">BDX</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">BF-B</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">BMY</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">BR</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">CARR</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">CDW</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">CE</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">CHTR</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">CNC</span><span class="sh">"</span><span class="p">,</span>
  <span class="sh">"</span><span class="s">CNP</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">COP</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">CTAS</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">CZR</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">DG</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">DPZ</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">DRE</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">DXC</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">META</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">FTV</span><span class="sh">"</span><span class="p">,</span>
  <span class="sh">"</span><span class="s">GOOG</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">GPC</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">HIG</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">HST</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">JPM</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">KR</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">OGN</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">PG</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">PPL</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">PRU</span><span class="sh">"</span><span class="p">,</span>
  <span class="sh">"</span><span class="s">PYPL</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">RE</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">ROL</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">ROST</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">UNH</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">URI</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">V</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">VRSK</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">WRK</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XOM</span><span class="sh">"</span><span class="p">,</span>
  <span class="sh">"</span><span class="s">IVV</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IWM</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWU</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWG</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWL</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWQ</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IEUS</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWJ</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWT</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">MCHI</span><span class="sh">"</span><span class="p">,</span>
  <span class="sh">"</span><span class="s">INDA</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWY</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWA</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWH</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWZ</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">EWC</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IEMG</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">LQD</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">HYG</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">SHY</span><span class="sh">"</span><span class="p">,</span>
  <span class="sh">"</span><span class="s">IEF</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">TLT</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">SEGA.L</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IEAA.L</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">HIGH.L</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">JPEA.L</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IAU</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">SLV</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">GSG</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">REET</span><span class="sh">"</span><span class="p">,</span>
  <span class="sh">"</span><span class="s">ICLN</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IXN</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IGF</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IUVL.L</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IUMO.L</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">SPMV.L</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IEVL.L</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">IEFM.L</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">MVEU.L</span><span class="sh">"</span><span class="p">,</span>
  <span class="sh">"</span><span class="s">XLK</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XLF</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XLV</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XLE</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XLY</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XLI</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XLC</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XLU</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XLP</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">XLB</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">VXX</span><span class="sh">"</span><span class="p">]</span>

<span class="c1">#Download historical data (select starting date)
</span><span class="n">starting_date</span> <span class="o">=</span> <span class="sh">"</span><span class="s">2015-01-01</span><span class="sh">"</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">yf</span><span class="p">.</span><span class="nf">download</span><span class="p">(</span><span class="n">assets</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="n">starting_date</span><span class="p">,</span> <span class="n">ignore_tz</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">prices</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Adj Close</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div> <p>Let’s visualize the missing data in the dataset:</p> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/missing_data.html" frameborder="0" scrolling="no" height="650px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The horizontal lines are likely to indicate bank holidays, while vertical lines indicate times when the stocks were not traded and hence not present in the dataset. <d-footnote> DRE (Duke Realty Corp) stock is not traded since Sep 30th, 2022. Its full absence is likely caused by yfinance download</d-footnote></p> <p>Let’s fill the missing values and transform the adjusted close prices to the target data. The target data for the forecasting part of the competition is the percentage return of adjusted close price over four weeks period.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calculate_pct_returns</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">,</span> <span class="n">periods</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">:</span>
    <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">x</span><span class="p">.</span><span class="nf">pct_change</span><span class="p">(</span><span class="n">periods</span><span class="o">=</span><span class="n">periods</span><span class="p">)</span>

<span class="c1"># fill missing values
</span><span class="n">prices</span> <span class="o">=</span> <span class="p">(</span><span class="n">prices</span><span class="p">.</span><span class="nf">dropna</span><span class="p">(</span><span class="n">how</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="nf">fillna</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="sh">"</span><span class="s">ffill</span><span class="sh">"</span><span class="p">).</span><span class="nf">fillna</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="sh">"</span><span class="s">bfill</span><span class="sh">"</span><span class="p">))</span>

<span class="n">target_data</span> <span class="o">=</span> <span class="n">prices</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="n">calculate_pct_returns</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">).</span><span class="nf">dropna</span><span class="p">()</span>
</code></pre></div></div> <h2 id="distributional-analysis">Distributional analysis</h2> <p>Distributional analysis is a statistical technique used to examine the distribution of a set of data. It involves studying the shape, central tendency, spread, and other features of the distribution of a variable, and making inferences about the underlying population from which the data was sampled.</p> <p>The goal of distributional analysis is to understand the underlying pattern of the data and how it varies across different groups or conditions.</p> <h3 id="box-plot">Box plot</h3> <p>A box plot, also known as a box and whisker plot, is a type of data visualization that displays the distribution of a set of continuous or ordinal data. It provides a compact and informative summary of the data by displaying the median, quartiles, and outliers of the data in a single plot.</p> <p>A box plot consists of a box that represents the interquartile range (IQR) of the data, which encompasses the middle 50% of the data. The box is drawn from the first quartile (25th percentile) to the third quartile (75th percentile), and the line inside the box represents the median (50th percentile) of the data. The “whiskers” extending from the box represent the range of the data, excluding outliers, which are plotted as individual points outside the whiskers.</p> <p>Box plots are widely used to compare the distribution of multiple variables, to identify outliers, and to detect skewness or symmetry in the data. By visualizing the quartiles, median, and outliers, box plots provide a concise and interpretable summary of the distribution of the data.</p> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/box.html" frameborder="0" scrolling="no" height="400px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="box-plot">Box plot</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="nc">Figure</span><span class="p">()</span>
<span class="n">N</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>     <span class="c1"># Number of boxes
# generate an array of rainbow colors by fixing the saturation and lightness of the HSL
# representation of colour and marching around the hue.
# Plotly accepts any CSS color format, see e.g. http://www.w3schools.com/cssref/css_colors_legal.asp.
</span><span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">hsl(</span><span class="sh">'</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">h</span><span class="p">)</span><span class="o">+</span><span class="sh">'</span><span class="s">,50%</span><span class="sh">'</span><span class="o">+</span><span class="sh">'</span><span class="s">,50%)</span><span class="sh">'</span> <span class="k">for</span> <span class="n">h</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="n">N</span><span class="p">)]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">column</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">[:]):</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="nc">Box</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="n">column</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span>  <span class="n">marker_color</span><span class="o">=</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
    
<span class="c1"># format the layout
</span><span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
    <span class="n">legend</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">orientation</span><span class="o">=</span><span class="sh">"</span><span class="s">v</span><span class="sh">"</span><span class="p">,</span> <span class="n">yanchor</span><span class="o">=</span><span class="sh">"</span><span class="s">bottom</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">xanchor</span><span class="o">=</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="mf">1.15</span><span class="p">),</span>
    <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Box plot</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span>
    <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_xaxes</span><span class="p">(</span><span class="n">tickangle</span><span class="o">=-</span><span class="mi">90</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_yaxes</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Returns, [pu]</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="ridgejoy-plot">Ridge/Joy plot</h3> <p>A Ridge or Joy plot is a type of data visualization that displays a set of overlapping line segments to represent the distribution of a set of continuous or ordinal data. The plot is named after its inventor, Norman B. Joy, who first introduced it in the 1930s.</p> <p>The Ridge plot displays the distribution of the data over the range of values, with the height of the line segments indicating the density of data points at a given value. Ridge plots can be used to visualize the distribution of a single variable and to compare the distributions of multiple variables. Ridge plots are particularly useful for visualizing complex data distributions, where the shape of the distribution is not easily summarized by a single statistic like the mean or median.</p> <p>In the example below, the Ridge plot is used to compare densities of asset distributions per specific month.</p> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/ridge.html" frameborder="0" scrolling="no" height="800px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="ridgejoy-plot">Ridge/Joy plot</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">plotly.graph_objects</span> <span class="k">as</span> <span class="n">go</span>
<span class="kn">from</span> <span class="n">plotly.colors</span> <span class="kn">import</span> <span class="n">n_colors</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">months</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">month</span><span class="p">.</span><span class="nf">unique</span><span class="p">().</span><span class="nf">to_list</span><span class="p">()</span>
<span class="n">colors</span> <span class="o">=</span> <span class="nf">n_colors</span><span class="p">(</span><span class="sh">'</span><span class="s">rgb(5, 200, 200)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">rgb(200, 10, 10)</span><span class="sh">'</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">months</span><span class="p">),</span> <span class="n">colortype</span><span class="o">=</span><span class="sh">'</span><span class="s">rgb</span><span class="sh">'</span><span class="p">)</span>
<span class="c1"># fig = make_subplots(rows=100, cols=1, vertical_spacing=0.01, shared_xaxes=True)
</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="nc">Figure</span><span class="p">()</span>
<span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">target_data</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">to_list</span><span class="p">()[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">months</span><span class="p">)):</span>
        <span class="n">data_line</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">target_data</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">month</span><span class="o">==</span><span class="n">months</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">column</span><span class="p">].</span><span class="nf">dropna</span><span class="p">().</span><span class="n">T</span>
        <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="nc">Violin</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">data_line</span><span class="p">,</span> <span class="n">legendgroup</span><span class="o">=</span><span class="n">months</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">scalegroup</span><span class="o">=</span><span class="n">months</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">line_color</span><span class="o">=</span><span class="n">colors</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">column</span><span class="si">}</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">update_traces</span><span class="p">(</span><span class="n">orientation</span><span class="o">=</span><span class="sh">'</span><span class="s">h</span><span class="sh">'</span><span class="p">,</span> <span class="n">side</span><span class="o">=</span><span class="sh">'</span><span class="s">positive</span><span class="sh">'</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">points</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span><span class="n">xaxis_showgrid</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">xaxis_zeroline</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span><span class="n">violingap</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">violinmode</span><span class="o">=</span><span class="sh">'</span><span class="s">overlay</span><span class="sh">'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Ridgeline/Joy plot</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
    <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="meanvar-plot">Mean/Var plot</h3> <p>A Mean/Var scatter plot is a type of scatter plot where the x-axis represents the mean of the data, the y-axis represents the variable category, and a single dot size shows variance of the data. It is used to visualize the relationship between the mean and variance of a set of data, and can provide insights into the distribution of the data.</p> <p>As for the Ridge plot, the points of Mean Var plot are grouped by the month.</p> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/mean_var.html" frameborder="0" scrolling="no" height="400px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="meanvar-plot">Mean/Var plot</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="nf">dropna</span><span class="p">()</span>
<span class="n">df</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="n">df</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">month_name</span><span class="p">()])</span>
    <span class="p">.</span><span class="nf">agg</span><span class="p">({</span><span class="n">k</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">mean</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">var</span><span class="sh">"</span><span class="p">]</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">})</span>
    <span class="p">.</span><span class="nf">unstack</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">unstack</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">reset_index</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">level_0</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">ticker</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Date</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">})</span>
<span class="p">)</span>
<span class="n">n_colors</span> <span class="o">=</span> <span class="mi">12</span>
<span class="n">colors</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="nf">sample_colorscale</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">plasma</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">/</span> <span class="p">(</span><span class="n">n_colors</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_colors</span><span class="p">)]</span>
<span class="p">)</span>

<span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="sh">"</span><span class="s">category</span><span class="sh">"</span><span class="p">)</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span>
    <span class="n">df</span><span class="p">,</span>
    <span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">mean</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">ticker</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">size</span><span class="o">=</span><span class="sh">"</span><span class="s">var</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">size_max</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span>
    <span class="n">log_x</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">colors</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">update_xaxes</span><span class="p">(</span><span class="n">showline</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">linecolor</span><span class="o">=</span><span class="sh">"</span><span class="s">grey</span><span class="sh">"</span><span class="p">,</span> <span class="n">gridcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">grey</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_yaxes</span><span class="p">(</span><span class="n">showline</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">linecolor</span><span class="o">=</span><span class="sh">"</span><span class="s">grey</span><span class="sh">"</span><span class="p">,</span> <span class="n">gridcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">grey</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
    <span class="n">legend</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">orientation</span><span class="o">=</span><span class="sh">"</span><span class="s">v</span><span class="sh">"</span><span class="p">,</span> <span class="n">yanchor</span><span class="o">=</span><span class="sh">"</span><span class="s">bottom</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">xanchor</span><span class="o">=</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="mf">1.05</span><span class="p">),</span>
    <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Mean/ Variance scatter plot</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span>
    <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="q-q-plot">Q-Q plot</h3> <p>A Quantile-Quantile (Q-Q) plot is a graphical representation of the comparison between two sets of data. It plots the quantiles of one dataset against the quantiles of another dataset to check if they are drawn from the same underlying distribution. If the two datasets come from the same underlying distribution, the points in the Q-Q plot will form a roughly straight line, which indicates that the quantiles of the two datasets are proportional to each other. Deviations from this straight line can indicate differences between the distributions.</p> <p>Q-Q plots can also be used to check if a dataset follows a specific theoretical distribution, such as a normal or exponential distribution. In that case, the quantiles of the data set are plotted against the corresponding quantiles of the theoretical distribution.</p> <p>Here are some key steps for interpreting a Q-Q plot:</p> <ul> <li> <p><strong>Check the shape of the plot</strong>: If the data set fits the theoretical distribution, the points on the Q-Q plot should lie on a straight line. If the points deviate from the straight line, it indicates that the data set does not fit the theoretical distribution.</p> </li> <li> <p><strong>Assess the deviation from the line</strong>: If the points deviate from the straight line, the degree of deviation can be used to assess the goodness of fit of the data set to the theoretical distribution. If the points deviate substantially from the straight line, it indicates a poor fit, while if the points deviate only slightly from the line, it indicates a good fit.</p> </li> <li> <p><strong>Check for outliers</strong>: Outliers can be identified on the Q-Q plot as points that deviate significantly from the straight line. Outliers can have a substantial impact on the fit of the data set to the theoretical distribution and may need to be removed or handled differently in further analysis.</p> </li> <li> <p><strong>Check for skewness</strong>: If the data set is skewed, a skewed data set will result in a curved shape of the points on the plot, rather than a straight line. The direction of the curve will indicate the direction of the skew, with a curve to the right indicating positive skew and a curve to the left indicating negative skew.</p> </li> </ul> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/qq_plot.html" frameborder="0" scrolling="no" height="700px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="qq-plot">QQ plot</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">itertools</span>
<span class="kn">from</span> <span class="n">plotly.express.colors</span> <span class="kn">import</span> <span class="n">sample_colorscale</span>
<span class="kn">from</span> <span class="n">plotly.subplots</span> <span class="kn">import</span> <span class="n">make_subplots</span>
<span class="kn">from</span> <span class="n">statsmodels.graphics.gofplots</span> <span class="kn">import</span> <span class="n">qqplot</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="mi">365</span><span class="p">:]</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">))</span>
<span class="n">c</span> <span class="o">=</span> <span class="nf">sample_colorscale</span><span class="p">(</span><span class="sh">'</span><span class="s">rainbow</span><span class="sh">'</span><span class="p">,</span> <span class="nf">list</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">colortype</span><span class="o">=</span><span class="sh">'</span><span class="s">rgb</span><span class="sh">'</span><span class="p">)</span>


<span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="nc">Figure</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">column</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">to_list</span><span class="p">()):</span>
    <span class="n">series</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">column</span><span class="p">]</span>
    <span class="n">qqplot_data</span> <span class="o">=</span> <span class="nf">qqplot</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="sh">'</span><span class="s">s</span><span class="sh">'</span><span class="p">).</span><span class="nf">gca</span><span class="p">().</span><span class="n">lines</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">({</span>
        <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">scatter</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">:</span> <span class="n">qqplot_data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">get_xdata</span><span class="p">(),</span>
        <span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">:</span> <span class="n">qqplot_data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">get_ydata</span><span class="p">(),</span>
        <span class="sh">'</span><span class="s">mode</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">markers</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">marker</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">color</span><span class="sh">'</span><span class="p">:</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="p">},</span>
        <span class="sh">'</span><span class="s">legendgroup</span><span class="sh">'</span><span class="p">:</span> <span class="n">column</span><span class="p">,</span> 
        <span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="n">column</span><span class="p">,</span> 
        <span class="sh">'</span><span class="s">showlegend</span><span class="sh">'</span><span class="p">:</span> <span class="bp">True</span>
    <span class="p">})</span>

    <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">({</span>
        <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">scatter</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">:</span> <span class="n">qqplot_data</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">get_xdata</span><span class="p">(),</span>
        <span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">:</span> <span class="n">qqplot_data</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">get_ydata</span><span class="p">(),</span>
        <span class="sh">'</span><span class="s">mode</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">lines</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">line</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">color</span><span class="sh">'</span><span class="p">:</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="p">},</span>
        <span class="sh">'</span><span class="s">legendgroup</span><span class="sh">'</span><span class="p">:</span> <span class="n">column</span><span class="p">,</span> 
        <span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="n">column</span><span class="p">,</span> 
        <span class="sh">'</span><span class="s">showlegend</span><span class="sh">'</span><span class="p">:</span> <span class="bp">False</span>

    <span class="p">})</span>

<span class="n">fig</span><span class="p">[</span><span class="sh">'</span><span class="s">layout</span><span class="sh">'</span><span class="p">].</span><span class="nf">update</span><span class="p">({</span>
    <span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Quantile-Quantile Plot</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">xaxis</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Theoritical Quantities</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">zeroline</span><span class="sh">'</span><span class="p">:</span> <span class="bp">False</span>
    <span class="p">},</span>
    <span class="sh">'</span><span class="s">yaxis</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Sample Quantities</span><span class="sh">'</span>
    <span class="p">},</span>
    <span class="sh">'</span><span class="s">showlegend</span><span class="sh">'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">:</span> <span class="mi">800</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">:</span> <span class="mi">700</span><span class="p">,</span>
<span class="p">})</span>


<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="histogram-plot">Histogram plot</h3> <p>A histogram is a graphical representation of data that groups data points into ranges and displays the frequency of data points within each range as bars. The x-axis of a histogram plot represents the range of values in the data, and the y-axis represents the frequency or count of data points within each range. The ranges are usually specified as bins, and the height of each bar represents the number of data points in the corresponding bin.</p> <p>Histograms are used to visualize the distribution of a set of continuous or discrete data, and can provide information about the central tendency, skewness, and spread of the data. By comparing histograms of different datasets, one can gain insights into the similarities and differences between the data distributions.</p> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/hist.html" frameborder="0" scrolling="no" height="700px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="histogram-plot">Histogram plot</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">plotly.graph_objects</span> <span class="k">as</span> <span class="n">go</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="nc">Figure</span><span class="p">()</span>
<span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">:</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="nc">Histogram</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="n">column</span><span class="p">],</span>
        <span class="n">cumulative_enabled</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">histnorm</span><span class="o">=</span><span class="sh">'</span><span class="s">percent</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span> <span class="c1"># name used in legend and hover labels
</span>    <span class="p">))</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
    <span class="n">title_text</span><span class="o">=</span><span class="sh">'</span><span class="s">Histogram plot</span><span class="sh">'</span><span class="p">,</span> <span class="c1"># title of plot
</span>    <span class="n">xaxis_title_text</span><span class="o">=</span><span class="sh">'</span><span class="s">Value</span><span class="sh">'</span><span class="p">,</span> <span class="c1"># xaxis label
</span>    <span class="n">yaxis_title_text</span><span class="o">=</span><span class="sh">'</span><span class="s">Count</span><span class="sh">'</span><span class="p">,</span> <span class="c1"># yaxis label
</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span><span class="n">barmode</span><span class="o">=</span><span class="sh">'</span><span class="s">overlay</span><span class="sh">'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_xaxes</span><span class="p">(</span><span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h2 id="temporal-analysis">Temporal analysis</h2> <p>The goal of temporal analysis is to understand how the behavior of a variable changes over time and to identify any underlying patterns or trends in the data.</p> <h3 id="line-plot-with-sliding-window">Line plot with sliding window</h3> <p>A line plot for temporal analysis is a type of data visualization that displays the change in a continuous or ordinal variable over time. Line plots provide a simple and intuitive way to understand how a variable changes over time, and to identify trends, patterns, and outliers in the data.</p> <p>In a line plot, the x-axis is usually a time-based variable, such as date, time, or an index. The y-axis represents the value of the variable.</p> <p>The example shows an advanced version of the line plot with sliding window.</p> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/sliding.html" frameborder="0" scrolling="no" height="650px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>If you zoom in the year 2022, then you will see a periodic multivariate variations resambling a signal of unstable system with increasing amplitude.</p> <p>If you have a high granularity data over a long time period, line plots often overloads the memory and crash you IDE. In that case, <a href="https://github.com/predict-idlab/plotly-resampler">plotly-resampler</a> library can serve the purpose.</p> <details> <summary>Click me to see the code</summary> <h3 id="line-plot-with-sliding-window-code">Line plot with sliding window code</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">df</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
  <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">Mean</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">index</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Date</span><span class="sh">"</span><span class="p">})</span>

  <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">line</span><span class="p">(</span>
      <span class="n">df</span><span class="p">,</span>
      <span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">Date</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">y</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span>
      <span class="n">hover_data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">Date</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">|%B %d, %Y</span><span class="sh">"</span><span class="p">},</span>
      <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Sliding window</span><span class="sh">"</span><span class="p">,</span>
  <span class="p">)</span>

  <span class="n">fig</span><span class="p">.</span><span class="nf">update_xaxes</span><span class="p">(</span>
      <span class="n">rangeslider_visible</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
      <span class="n">rangeselector</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span>
          <span class="n">buttons</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span>
              <span class="p">[</span>
                  <span class="nf">dict</span><span class="p">(</span><span class="n">count</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">1m</span><span class="sh">"</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="sh">"</span><span class="s">month</span><span class="sh">"</span><span class="p">,</span> <span class="n">stepmode</span><span class="o">=</span><span class="sh">"</span><span class="s">backward</span><span class="sh">"</span><span class="p">),</span>
                  <span class="nf">dict</span><span class="p">(</span><span class="n">count</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">6m</span><span class="sh">"</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="sh">"</span><span class="s">month</span><span class="sh">"</span><span class="p">,</span> <span class="n">stepmode</span><span class="o">=</span><span class="sh">"</span><span class="s">backward</span><span class="sh">"</span><span class="p">),</span>
                  <span class="nf">dict</span><span class="p">(</span><span class="n">count</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">YTD</span><span class="sh">"</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="sh">"</span><span class="s">year</span><span class="sh">"</span><span class="p">,</span> <span class="n">stepmode</span><span class="o">=</span><span class="sh">"</span><span class="s">todate</span><span class="sh">"</span><span class="p">),</span>
                  <span class="nf">dict</span><span class="p">(</span><span class="n">count</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">1y</span><span class="sh">"</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="sh">"</span><span class="s">year</span><span class="sh">"</span><span class="p">,</span> <span class="n">stepmode</span><span class="o">=</span><span class="sh">"</span><span class="s">backward</span><span class="sh">"</span><span class="p">),</span>
                  <span class="nf">dict</span><span class="p">(</span><span class="n">step</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">),</span>
              <span class="p">]</span>
          <span class="p">)</span>
      <span class="p">),</span>
  <span class="p">)</span>
  <span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
      <span class="n">xaxis_tickformatstops</span><span class="o">=</span><span class="p">[</span>
          <span class="nf">dict</span><span class="p">(</span><span class="n">dtickrange</span><span class="o">=</span><span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="mi">1000</span><span class="p">],</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">%H:%M:%S.%L ms</span><span class="sh">"</span><span class="p">),</span>
          <span class="nf">dict</span><span class="p">(</span><span class="n">dtickrange</span><span class="o">=</span><span class="p">[</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">60000</span><span class="p">],</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">%H:%M:%S s</span><span class="sh">"</span><span class="p">),</span>
          <span class="nf">dict</span><span class="p">(</span><span class="n">dtickrange</span><span class="o">=</span><span class="p">[</span><span class="mi">60000</span><span class="p">,</span> <span class="mi">3600000</span><span class="p">],</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">%H:%M m</span><span class="sh">"</span><span class="p">),</span>
          <span class="nf">dict</span><span class="p">(</span><span class="n">dtickrange</span><span class="o">=</span><span class="p">[</span><span class="mi">3600000</span><span class="p">,</span> <span class="mi">86400000</span><span class="p">],</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">%H:%M h</span><span class="sh">"</span><span class="p">),</span>
          <span class="nf">dict</span><span class="p">(</span><span class="n">dtickrange</span><span class="o">=</span><span class="p">[</span><span class="mi">86400000</span><span class="p">,</span> <span class="mi">604800000</span><span class="p">],</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">%e. %b d</span><span class="sh">"</span><span class="p">),</span>
          <span class="nf">dict</span><span class="p">(</span><span class="n">dtickrange</span><span class="o">=</span><span class="p">[</span><span class="mi">604800000</span><span class="p">,</span> <span class="sh">"</span><span class="s">M1</span><span class="sh">"</span><span class="p">],</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">%e. %b w</span><span class="sh">"</span><span class="p">),</span>
          <span class="nf">dict</span><span class="p">(</span><span class="n">dtickrange</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">M1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">M12</span><span class="sh">"</span><span class="p">],</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">%b </span><span class="sh">'</span><span class="s">%y M</span><span class="sh">"</span><span class="p">),</span>
          <span class="nf">dict</span><span class="p">(</span><span class="n">dtickrange</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">M12</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">],</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">%Y Y</span><span class="sh">"</span><span class="p">),</span>
      <span class="p">],</span>
      <span class="n">margin</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">50</span><span class="p">),</span>
      <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
  <span class="p">)</span>
  <span class="n">fig</span><span class="p">.</span><span class="nf">update_yaxes</span><span class="p">(</span>
      <span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">],</span>
  <span class="p">)</span>

  <span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="heatmap-plot">Heatmap plot</h3> <p>A heatmap plot is a type of data visualization that displays a matrix of data values as a grid of colored cells, where the color of each cell represents the magnitude of a specific data value. It is particularly useful for visualizing and analyzing multivariate datasets, where multiple variables are measured for each data point.</p> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/heatmap.html" frameborder="0" scrolling="no" height="650px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h3 id="heatmap-plot-code">Heatmap plot code</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> 
                <span class="n">color_continuous_scale</span><span class="o">=</span><span class="sh">"</span><span class="s">Cividis_r</span><span class="sh">"</span><span class="p">,</span> 
                <span class="n">origin</span><span class="o">=</span><span class="sh">'</span><span class="s">upper</span><span class="sh">'</span><span class="p">,</span> 
                <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Heatmap plot</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">range_color</span><span class="o">=</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">1.75</span><span class="p">)</span>
               <span class="p">)</span>
<span class="c1"># update layout for xaxis tickmode as linear
</span><span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
   <span class="n">yaxis</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span>
      <span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">'</span><span class="s">Helvetica</span><span class="sh">'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">)</span>
   <span class="p">),</span>
   <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="autocorrelation-plots">Autocorrelation plots</h3> <p>Autocorrelation plots, also known as ACF (autocorrelation function) plots, are a type of data visualization used to analyze the relationships between the values of a time-series data. Autocorrelation plots display the relationship between the values of a time-series data and its lagged values, with the lagged values representing the values of the time-series data at previous N time steps.</p> <p>In an autocorrelation plot, the x-axis represents the lags, and the y-axis represents the correlation between the values of the time-series data and its lagged values. A positive correlation between the values and their lags indicates a trend or pattern in the data, while a negative correlation indicates an opposing trend or pattern.</p> <p>Like autocorrelation plots, partial autocorrelation plots (PACF) display the relationship between the values of a time-series data and its lagged values. However, unlike autocorrelation plots, partial autocorrelation plots only display the relationship between the values and their lagged values neglecting the effect of shorter lags.</p> <p>For the autocorrelation plots, there are three options to use:</p> <ul> <li><a href="#heatmap-autocorrelation-plot"><strong>Heatmap autocorrelation plot</strong></a></li> <li><a href="#scatter-autocorrelation-plot"><strong>Scatter autocorrelation plot</strong></a></li> <li><a href="#3d-autocorrelation-plot"><strong>3D autocorrelation plot</strong></a></li> </ul> <p>Below, you can see these visualizations for the dataset. What is your favorite?</p> <h4 id="heatmap-autocorrelation-plot">Heatmap autocorrelation plot</h4> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/acf_pcf1.html" frameborder="0" scrolling="no" height="850px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="heatmap-autocorrelation-plot-code">Heatmap autocorrelation plot code</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">fig</span> <span class="o">=</span> <span class="nf">make_subplots</span><span class="p">(</span>
      <span class="mi">2</span><span class="p">,</span>
      <span class="mi">1</span><span class="p">,</span>
      <span class="n">shared_xaxes</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
      <span class="n">shared_yaxes</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
      <span class="n">subplot_titles</span><span class="o">=</span><span class="p">(</span>
          <span class="sh">"</span><span class="s">Plot 1</span><span class="sh">"</span><span class="p">,</span>
          <span class="sh">"</span><span class="s">Plot 2</span><span class="sh">"</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="n">vertical_spacing</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
  <span class="p">)</span>
  <span class="n">names</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">Plot 1</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Autocorrelation (ACF)</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Plot 2</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Partial Autocorrelation (PACF)</span><span class="sh">"</span><span class="p">}</span>


  <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span>
      <span class="n">go</span><span class="p">.</span><span class="nc">Heatmap</span><span class="p">(</span>
          <span class="n">z</span><span class="o">=</span><span class="n">df_acf</span><span class="p">.</span><span class="n">T</span><span class="p">,</span>
          <span class="n">y</span><span class="o">=</span><span class="n">df_acf</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">index</span><span class="p">,</span>
          <span class="n">x</span><span class="o">=</span><span class="n">df_acf</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span>
          <span class="n">colorscale</span><span class="o">=</span><span class="sh">"</span><span class="s">Rainbow</span><span class="sh">"</span><span class="p">,</span>
          <span class="n">coloraxis</span><span class="o">=</span><span class="sh">"</span><span class="s">coloraxis1</span><span class="sh">"</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
      <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
  <span class="p">)</span>

  <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span>
      <span class="n">go</span><span class="p">.</span><span class="nc">Heatmap</span><span class="p">(</span>
          <span class="n">z</span><span class="o">=</span><span class="n">df_pacf</span><span class="p">.</span><span class="n">T</span><span class="p">,</span>
          <span class="n">y</span><span class="o">=</span><span class="n">df_acf</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">index</span><span class="p">,</span>
          <span class="n">x</span><span class="o">=</span><span class="n">df_acf</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span>
          <span class="n">colorscale</span><span class="o">=</span><span class="sh">"</span><span class="s">Rainbow</span><span class="sh">"</span><span class="p">,</span>
          <span class="n">coloraxis</span><span class="o">=</span><span class="sh">"</span><span class="s">coloraxis1</span><span class="sh">"</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
      <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
  <span class="p">)</span>

  <span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
      <span class="n">height</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
      <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
      <span class="n">title_text</span><span class="o">=</span><span class="sh">"</span><span class="s">ACF and PACF</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">xaxis2_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Time lag, [days]</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">yaxis_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Ticker, [idx]</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">yaxis2_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Ticker, [idx]</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">legend_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Legend</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">showlegend</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
      <span class="n">margin</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">50</span><span class="p">),</span>
      <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
      <span class="n">yaxis1_nticks</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span>
      <span class="n">yaxis2_nticks</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span>
      <span class="n">yaxis1</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Helvetica</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">)),</span>
      <span class="n">yaxis2</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Helvetica</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">)),</span>
      <span class="n">coloraxis1_colorbar</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span>
          <span class="n">thickness</span><span class="o">=</span><span class="mf">20.0</span><span class="p">,</span>
          <span class="n">title</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span>
      <span class="p">),</span>
  <span class="p">)</span>

  <span class="n">fig</span><span class="p">.</span><span class="nf">for_each_annotation</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">a</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">names</span><span class="p">[</span><span class="n">a</span><span class="p">.</span><span class="n">text</span><span class="p">]))</span>
  <span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h4 id="scatter-autocorrelation-plot">Scatter autocorrelation plot</h4> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/acf_pacf_2d.html" frameborder="0" scrolling="no" height="850px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="scatter-autocorrelation-plot-code">Scatter autocorrelation plot code</h5> <p>modified from <a href="https://community.plotly.com/t/plot-pacf-plot-acf-autocorrelation-plot-and-lag-plot/24108/3">here</a></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">from</span> <span class="n">plotly.express.colors</span> <span class="kn">import</span> <span class="n">sample_colorscale</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">target_data</span><span class="p">.</span><span class="n">columns</span><span class="p">))</span>
  <span class="n">c</span> <span class="o">=</span> <span class="nf">sample_colorscale</span><span class="p">(</span><span class="sh">'</span><span class="s">rainbow</span><span class="sh">'</span><span class="p">,</span> <span class="nf">list</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">colortype</span><span class="o">=</span><span class="sh">'</span><span class="s">rgb</span><span class="sh">'</span><span class="p">)</span>
  <span class="n">rgb_to_rgba</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="sh">"</span><span class="s">rgba</span><span class="sh">"</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, 0.05)</span><span class="sh">"</span>

  <span class="n">fig</span> <span class="o">=</span> <span class="nf">make_subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">shared_xaxes</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">shared_yaxes</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">subplot_titles</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">Plot 1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Plot 2</span><span class="sh">"</span><span class="p">,),</span> <span class="n">vertical_spacing</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,)</span>
  <span class="n">names</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">Plot 1</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">Autocorrelation (ACF)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Plot 2</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">Partial Autocorrelation (PACF)</span><span class="sh">'</span><span class="p">}</span>
  <span class="n">nlags</span> <span class="o">=</span> <span class="mi">50</span>

  <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">func</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="p">[</span><span class="n">acf</span><span class="p">,</span> <span class="n">pacf</span><span class="p">]):</span>
      <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">column</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">target_data</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">to_list</span><span class="p">()):</span>
          <span class="n">series</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">[</span><span class="n">column</span><span class="p">]</span>
          <span class="n">corr_array</span> <span class="o">=</span> <span class="nf">func</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">nlags</span><span class="o">=</span><span class="n">nlags</span><span class="p">)</span>
          <span class="n">lower_y</span> <span class="o">=</span> <span class="n">corr_array</span><span class="p">[</span><span class="mi">1</span><span class="p">][:,</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">corr_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
          <span class="n">upper_y</span> <span class="o">=</span> <span class="n">corr_array</span><span class="p">[</span><span class="mi">1</span><span class="p">][:,</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">corr_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
          <span class="n">fig</span><span class="p">.</span><span class="nf">add_scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">corr_array</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="n">y</span><span class="o">=</span><span class="n">corr_array</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">markers</span><span class="sh">'</span><span class="p">,</span> <span class="n">marker_color</span><span class="o">=</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">],</span>
                          <span class="n">marker_size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
          <span class="p">[</span><span class="n">fig</span><span class="p">.</span><span class="nf">add_scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">),</span> <span class="n">y</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">corr_array</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="p">]),</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">lines</span><span class="sh">'</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="sh">'</span><span class="s">#3f3f3f</span><span class="sh">'</span><span class="p">,</span><span class="n">line_width</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
                  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">corr_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]))]</span>
          <span class="n">fig</span><span class="p">.</span><span class="nf">add_scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">corr_array</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="n">y</span><span class="o">=</span><span class="n">upper_y</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">lines</span><span class="sh">'</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="nf">rgb_to_rgba</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
          <span class="n">fig</span><span class="p">.</span><span class="nf">add_scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">corr_array</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="n">y</span><span class="o">=</span><span class="n">lower_y</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">lines</span><span class="sh">'</span><span class="p">,</span> <span class="n">fillcolor</span><span class="o">=</span><span class="nf">rgb_to_rgba</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span>
                  <span class="n">fill</span><span class="o">=</span><span class="sh">'</span><span class="s">tonexty</span><span class="sh">'</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="nf">rgb_to_rgba</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">row</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">fig</span><span class="p">.</span><span class="nf">update_traces</span><span class="p">(</span><span class="n">showlegend</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
  <span class="n">fig</span><span class="p">.</span><span class="nf">update_xaxes</span><span class="p">(</span><span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">50</span><span class="p">])</span>
  <span class="n">fig</span><span class="p">.</span><span class="nf">update_yaxes</span><span class="p">(</span><span class="n">zerolinecolor</span><span class="o">=</span><span class="sh">'</span><span class="s">#000000</span><span class="sh">'</span><span class="p">)</span>
  <span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
      <span class="n">title_text</span><span class="o">=</span><span class="sh">"</span><span class="s">ACF and PACF</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">xaxis2_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Time lag, [days]</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">yaxis_title</span><span class="o">=</span><span class="sh">"</span><span class="s">ACF, [pu]</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">yaxis2_title</span><span class="o">=</span><span class="sh">"</span><span class="s">PACF, [pu]</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">legend_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Legend</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">showlegend</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
      <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
      <span class="n">height</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
      <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
  <span class="p">)</span>
  <span class="n">fig</span><span class="p">.</span><span class="nf">for_each_annotation</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">a</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">text</span> <span class="o">=</span> <span class="n">names</span><span class="p">[</span><span class="n">a</span><span class="p">.</span><span class="n">text</span><span class="p">]))</span>
  <span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h4 id="3d-autocorrelation-plot">3D autocorrelation plot</h4> <div class="l-page-outset"> <iframe src="/assets/plotly/eda/acf_pacf_3d.html" frameborder="0" scrolling="no" height="550px" width="110%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="d-autocorrelation-plot-code">3D autocorrelation plot code</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">fig</span> <span class="o">=</span> <span class="nf">make_subplots</span><span class="p">(</span>
    <span class="mi">1</span><span class="p">,</span>
    <span class="mi">2</span><span class="p">,</span>
    <span class="n">shared_xaxes</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">shared_yaxes</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">subplot_titles</span><span class="o">=</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">Plot 1</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Plot 2</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="c1"># horizontal_spacing=0.5,
</span>    <span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">surface</span><span class="sh">"</span><span class="p">},</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">surface</span><span class="sh">"</span><span class="p">}]],</span>
<span class="p">)</span>
<span class="n">names</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">Plot 1</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Autocorrelation (ACF)</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Plot 2</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Partial Autocorrelation (PACF)</span><span class="sh">"</span><span class="p">}</span>


<span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span>
    <span class="n">go</span><span class="p">.</span><span class="nc">Surface</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">df_acf</span><span class="p">.</span><span class="n">values</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">df_acf</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">df_acf</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">showscale</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span>
    <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span>
    <span class="n">go</span><span class="p">.</span><span class="nc">Surface</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">df_pacf</span><span class="p">.</span><span class="n">values</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">df_pacf</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">df_pacf</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">showscale</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span>
    <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">col</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">3d ACF and PACF</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">autosize</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">1200</span><span class="p">,</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span>
    <span class="n">margin</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="mi">65</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">105</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="mi">90</span><span class="p">),</span>
    <span class="n">scene</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span>
        <span class="n">xaxis_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Ticker, [idx]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">yaxis_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Time lag, [days]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">zaxis_title</span><span class="o">=</span><span class="sh">"</span><span class="s">ACF</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="n">scene2</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span>
        <span class="n">xaxis_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Ticker, [idx]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">yaxis_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Time lag, [days]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">zaxis_title</span><span class="o">=</span><span class="sh">"</span><span class="s">PACF</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_traces</span><span class="p">(</span>
    <span class="n">contours_z</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span>
        <span class="n">show</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">usecolormap</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">highlightcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">limegreen</span><span class="sh">"</span><span class="p">,</span> <span class="n">project_z</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">for_each_annotation</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">a</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">names</span><span class="p">[</span><span class="n">a</span><span class="p">.</span><span class="n">text</span><span class="p">]))</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="scatter-polar-plot">Scatter polar plot</h3> <p>A scatter polar plot is a type of data visualization that combines a scatter plot and a polar plot. It is used to display the relationship between two variables, where one variable is represented by a radial distance from the origin, and the other variable is represented by an angle around the origin. Scatter polar plots are useful for displaying the relationships between two cyclic variables, such as wind direction and wind speed, or for displaying the distribution of data in polar coordinates.</p> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/scatterpolar.html" frameborder="0" scrolling="no" height="550px" width="110%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="scatter-polar">Scatter polar</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">FunctionTransformer</span>

<span class="k">def</span> <span class="nf">sin_transformer</span><span class="p">(</span><span class="n">period</span><span class="p">):</span>
    <span class="k">return</span> <span class="nc">FunctionTransformer</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">x</span> <span class="o">/</span> <span class="n">period</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="mi">360</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">cos_transformer</span><span class="p">(</span><span class="n">period</span><span class="p">):</span>
    <span class="k">return</span> <span class="nc">FunctionTransformer</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">x</span> <span class="o">/</span> <span class="n">period</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="mi">360</span><span class="p">)</span>

<span class="n">test_df</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="nf">dropna</span><span class="p">().</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">test_df</span><span class="p">[</span><span class="sh">"</span><span class="s">dayofweek</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">test_df</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">dayofweek</span>
<span class="n">test_df</span><span class="p">[</span><span class="sh">"</span><span class="s">dayofyear</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">test_df</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">dayofyear</span>

<span class="n">test_df</span><span class="p">[</span><span class="sh">"</span><span class="s">sin_dayofyear</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">sin_transformer</span><span class="p">(</span><span class="mi">365</span><span class="p">).</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">test_df</span><span class="p">[</span><span class="sh">"</span><span class="s">dayofyear</span><span class="sh">"</span><span class="p">])</span>
<span class="n">test_df</span><span class="p">[</span><span class="sh">"</span><span class="s">cos_dayofyear</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">cos_transformer</span><span class="p">(</span><span class="mi">365</span><span class="p">).</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">test_df</span><span class="p">[</span><span class="sh">"</span><span class="s">dayofyear</span><span class="sh">"</span><span class="p">])</span>
<span class="n">test_df</span> <span class="o">=</span> <span class="n">test_df</span><span class="p">[</span><span class="n">test_df</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">year</span> <span class="o">==</span> <span class="mi">2022</span><span class="p">]</span>
<span class="n">names</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">Plot 1</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">Cos(f)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Plot 2</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">Sin(f)</span><span class="sh">'</span><span class="p">}</span>

<span class="n">fig</span> <span class="o">=</span> <span class="nf">make_subplots</span><span class="p">(</span>
    <span class="mi">1</span><span class="p">,</span>
    <span class="mi">2</span><span class="p">,</span>
    <span class="n">shared_xaxes</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">shared_yaxes</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">subplot_titles</span><span class="o">=</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">Plot 1</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Plot 2</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="n">horizontal_spacing</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
    <span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">scatterpolar</span><span class="sh">"</span><span class="p">},</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">scatterpolar</span><span class="sh">"</span><span class="p">}]],</span>

<span class="p">)</span>

<span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">target_data</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">to_list</span><span class="p">():</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span>
        <span class="n">go</span><span class="p">.</span><span class="nc">Scatterpolar</span><span class="p">(</span>
            <span class="n">r</span><span class="o">=</span><span class="n">test_df</span><span class="p">[</span><span class="n">column</span><span class="p">],</span>
            <span class="n">theta</span><span class="o">=</span><span class="n">test_df</span><span class="p">[</span><span class="sh">"</span><span class="s">cos_dayofyear</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">mode</span><span class="o">=</span><span class="sh">"</span><span class="s">lines</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span>
        <span class="p">),</span>
        <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span>
        <span class="n">go</span><span class="p">.</span><span class="nc">Scatterpolar</span><span class="p">(</span>
            <span class="n">r</span><span class="o">=</span><span class="n">test_df</span><span class="p">[</span><span class="n">column</span><span class="p">],</span>
            <span class="n">theta</span><span class="o">=</span><span class="n">test_df</span><span class="p">[</span><span class="sh">"</span><span class="s">sin_dayofyear</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">mode</span><span class="o">=</span><span class="sh">"</span><span class="s">lines</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span>
        <span class="p">),</span>
        <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">col</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>    
    <span class="n">title_text</span><span class="o">=</span><span class="sh">"</span><span class="s">Scatter polar</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">showlegend</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> 
    <span class="n">width</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span>
    <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">for_each_annotation</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">a</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">text</span> <span class="o">=</span> <span class="n">names</span><span class="p">[</span><span class="n">a</span><span class="p">.</span><span class="n">text</span><span class="p">]))</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="lagged-scatter-plot">Lagged scatter plot</h3> <p>A lagged scatter plot is a type of data visualization that is used to analyze the relationships between the values of a time-series data. A lagged scatter plot displays the relationship between the values of a time-series data and its lagged values, with the lagged values representing the values of the time-series data at previous time steps.</p> <p>Here are some key steps for interpreting a lagged scatter plot:</p> <ol> <li> <p><strong>Identify the trend</strong>: Look for overall patterns in the data. If the data points form a clear diagonal line from the bottom left to the top right of the plot, it indicates a positive relationship between the values and their lags. If the data points form a clear diagonal line from the top left to the bottom right, it indicates a negative relationship.</p> </li> <li> <p><strong>Identify the strength of the relationship</strong>: The strength of the relationship between the values and their lags can be estimated by the degree of clustering of the data points. A tight cluster of data points indicates a strong relationship, while a dispersed scatter of data points indicates a weak relationship.</p> </li> <li> <p><strong>Identify the seasonality</strong>: If the data points form clear clusters at regular intervals, it indicates a seasonal pattern in the data. The number of clusters can be used to determine the frequency of the seasonality.</p> </li> <li> <p><strong>Identify the appropriate number of lags</strong>: The appropriate number of lags to include in a time-series model can be determined by the number of lags that have a significant relationship with the values. A significant relationship can be determined by statistical tests or by visual inspection of the autocorrelation plot.</p> </li> </ol> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/lag_plot.html" frameborder="0" scrolling="no" height="850px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="lagged-scatter-plot">Lagged scatter plot</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">import</span> <span class="n">itertools</span>
<span class="kn">from</span> <span class="n">plotly.express.colors</span> <span class="kn">import</span> <span class="n">sample_colorscale</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="mi">20</span><span class="p">:]</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">))</span>
<span class="n">c</span> <span class="o">=</span> <span class="nf">sample_colorscale</span><span class="p">(</span><span class="sh">'</span><span class="s">rainbow</span><span class="sh">'</span><span class="p">,</span> <span class="nf">list</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">colortype</span><span class="o">=</span><span class="sh">'</span><span class="s">rgb</span><span class="sh">'</span><span class="p">)</span>
<span class="n">locs</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">itertools</span><span class="p">.</span><span class="nf">product</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">2</span><span class="p">)]</span>

<span class="n">fig</span> <span class="o">=</span> <span class="nf">make_subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">shared_xaxes</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">shared_yaxes</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
                    <span class="n">subplot_titles</span><span class="o">=</span><span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="s">Lag </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)],</span> 
                    <span class="n">vertical_spacing</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">horizontal_spacing</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,)</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">column</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">to_list</span><span class="p">()):</span>
    <span class="n">series</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">column</span><span class="p">]</span>  
    <span class="k">for</span> <span class="n">lag</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
        <span class="n">lag_series</span> <span class="o">=</span> <span class="n">series</span><span class="p">.</span><span class="nf">shift</span><span class="p">(</span><span class="n">lag</span><span class="p">)</span>
        <span class="n">fig</span><span class="p">.</span><span class="nf">add_scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">lag_series</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">lag</span><span class="p">:],</span> <span class="n">y</span><span class="o">=</span><span class="n">series</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">lag</span><span class="p">:],</span> 
                        <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">markers</span><span class="sh">'</span><span class="p">,</span> <span class="n">marker_color</span><span class="o">=</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> 
                        <span class="n">legendgroup</span><span class="o">=</span><span class="n">column</span><span class="p">,</span> 
                        <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span> 
                        <span class="n">marker_size</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="n">locs</span><span class="p">[</span><span class="n">lag</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">col</span><span class="o">=</span><span class="n">locs</span><span class="p">[</span><span class="n">lag</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span>
                        <span class="n">showlegend</span><span class="o">=</span><span class="bp">True</span> <span class="k">if</span> <span class="n">lag</span><span class="o">==</span><span class="mi">1</span> <span class="k">else</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Lag plot</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
    <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">update_yaxes</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Actual</span><span class="sh">"</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_xaxes</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Shifted</span><span class="sh">"</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="seasonal-decomposition-plot">Seasonal decomposition plot</h3> <p>Seasonal decomposition is a statistical technique used to separate a time-series data into its components: trend, seasonality, and residuals. The goal of seasonal decomposition is to isolate the trend and seasonality of a time-series data so that they can be modeled and forecasted separately.</p> <p>A seasonal decomposition plot, also known as a seasonal decomposition of time series (STL) plot, is a visual representation of the results of the seasonal decomposition of a time-series data. It typically shows the original time-series data, the estimated trend, the estimated seasonality, and the residuals.</p> <p>Here are some key features of a seasonal decomposition plot:</p> <ul> <li> <p><strong>Trend</strong>: The trend represents the underlying pattern in the data, excluding the seasonality and the residuals. It can be used to make predictions about the future values of the time-series data.</p> </li> <li> <p><strong>Seasonality</strong>: The seasonality represents the repeating pattern in the data, such as daily, weekly, or yearly patterns. It can be used to make predictions about the future values of the time-series data based on the seasonality.</p> </li> <li> <p><strong>Residuals</strong>: The residuals represent the difference between the observed values and the estimated values based on the trend and seasonality. It can be used to assess the quality of the trend and seasonality estimates.</p> </li> </ul> <p>By analyzing the trend, seasonality, and residuals, a seasonal decomposition plot can provide valuable information about the structure of the time-series data, which can be used to make informed decisions about how to model and forecast the data.</p> <div class="l-body-outset"> <iframe src="/assets/plotly/eda/seasonal.html" frameborder="0" scrolling="no" height="780px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="seasonal-decomposition-plot">Seasonal decomposition plot</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">plotly.subplots</span> <span class="kn">import</span> <span class="n">make_subplots</span>
<span class="kn">import</span> <span class="n">itertools</span>
<span class="kn">from</span> <span class="n">statsmodels.tsa.seasonal</span> <span class="kn">import</span> <span class="n">seasonal_decompose</span>

<span class="n">df_tsa</span> <span class="o">=</span> <span class="nf">apply_to_dataframe</span><span class="p">(</span>
    <span class="n">target_data</span><span class="p">,</span>
    <span class="n">func</span><span class="o">=</span><span class="nf">partial</span><span class="p">(</span><span class="n">seasonal_decompose</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">additive</span><span class="sh">"</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">20</span><span class="p">),</span>
    <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">results</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">observed</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">trend</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">resid</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">seasonal</span><span class="sh">"</span><span class="p">]</span>
<span class="n">cbarlocs</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.85</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.15</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">]</span>

<span class="n">fig</span> <span class="o">=</span> <span class="nf">make_subplots</span><span class="p">(</span>
    <span class="mi">4</span><span class="p">,</span>
    <span class="mi">1</span><span class="p">,</span>
    <span class="n">horizontal_spacing</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
    <span class="n">shared_xaxes</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">shared_yaxes</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">subplot_titles</span><span class="o">=</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">Observed</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Trend</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Residuals</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Seasonal</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">)</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">attr</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)),</span> <span class="n">results</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span>
        <span class="p">[</span>
            <span class="nf">getattr</span><span class="p">(</span><span class="n">df_tsa</span><span class="p">[</span><span class="n">column</span><span class="p">],</span> <span class="n">attr</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">target_data</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">to_list</span><span class="p">()[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="p">],</span>
        <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">data</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">to_list</span><span class="p">()[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span>
        <span class="n">go</span><span class="p">.</span><span class="nc">Heatmap</span><span class="p">(</span>
            <span class="n">z</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="n">values</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span>
            <span class="n">name</span><span class="o">=</span><span class="n">column</span><span class="p">,</span>
            <span class="n">coloraxis</span><span class="o">=</span><span class="sh">"</span><span class="s">coloraxis</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">),</span>
        <span class="n">row</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span>
        <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Seasonal decomposition</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">showlegend</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
    <span class="n">coloraxis</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">colorscale</span><span class="o">=</span><span class="sh">"</span><span class="s">Plasma</span><span class="sh">"</span><span class="p">,</span> <span class="n">colorbar_x</span><span class="o">=</span><span class="mf">1.02</span><span class="p">,</span> <span class="n">colorbar_thickness</span><span class="o">=</span><span class="mi">20</span><span class="p">),</span>
    <span class="n">margin</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">50</span><span class="p">),</span>
    <span class="n">font</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Gravitas One</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">yaxis1</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Helvetica</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">)),</span>
    <span class="n">yaxis2</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Helvetica</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">)),</span>
    <span class="n">yaxis3</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Helvetica</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">)),</span>
    <span class="n">yaxis4</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">"</span><span class="s">Helvetica</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">)),</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h2 id="spatial-analysis">Spatial analysis</h2> <p>The goal of spatial analysis is to understand the relationships and patterns between the variables in a dataset.</p> <h3 id="correlation-plot">Correlation plot</h3> <p>A correlation plot is a type of plot used to visualize the relationship between two variables. It is often used to assess the strength and direction of the relationship between the variables. The goal of a correlation plot is to determine whether there is a relationship between the variables and, if so, to characterize the nature of that relationship.</p> <p>The strength of the relationship between the variables can be assessed by the correlation coefficient, which is a measure of the strength and direction of the linear relationship between the variables. A correlation coefficient of +1 indicates a perfect positive relationship, meaning that as one variable increases, the other variable also increases. A correlation coefficient of -1 indicates a perfect negative relationship, meaning that as one variable increases, the other variable decreases. A correlation coefficient of 0 indicates that there is no relationship between the variables.</p> <div class="l-body"> <iframe src="/assets/plotly/eda/correlation.html" frameborder="0" scrolling="no" height="600px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="correlation-plot">Correlation plot</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">plotly.graph_objects</span> <span class="k">as</span> <span class="n">go</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">target_data</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">corr</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">corr</span><span class="p">()</span>
<span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">triu</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">ones_like</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">))</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="nc">Heatmap</span><span class="p">(</span>
        <span class="n">z</span><span class="o">=</span><span class="n">corr</span><span class="p">.</span><span class="nf">mask</span><span class="p">(</span><span class="n">mask</span><span class="p">),</span>
        <span class="n">x</span><span class="o">=</span><span class="n">corr</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span>
        <span class="n">y</span><span class="o">=</span><span class="n">corr</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span>
        <span class="n">colorscale</span><span class="o">=</span><span class="n">px</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">diverging</span><span class="p">.</span><span class="n">RdBu</span><span class="p">,</span>
        <span class="n">zmin</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">zmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">layout</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="nc">Layout</span><span class="p">(</span>
    <span class="n">title_text</span><span class="o">=</span><span class="sh">'</span><span class="s">Asset Correlation Matrix</span><span class="sh">'</span><span class="p">,</span> 
    <span class="n">title_x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> 
    <span class="n">width</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span> 
    <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span>
    <span class="n">xaxis_showgrid</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">yaxis_showgrid</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
      <span class="n">yaxis_autorange</span><span class="o">=</span><span class="sh">'</span><span class="s">reversed</span><span class="sh">'</span>
<span class="p">)</span>

<span class="n">fig</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="nc">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span><span class="n">data</span><span class="p">],</span> <span class="n">layout</span><span class="o">=</span><span class="n">layout</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
   <span class="n">yaxis</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span>
      <span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">'</span><span class="s">Helvetica</span><span class="sh">'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">)</span>
      <span class="p">),</span>
   <span class="n">xaxis</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span>
      <span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">'</span><span class="s">Helvetica</span><span class="sh">'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">)</span>
      <span class="p">)</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h3 id="ppscore-plot">PPscore plot</h3> <p>The PPS is an asymmetric, data-type-agnostic score that can detect linear or non-linear relationships between two variables. The score ranges from 0 (no predictive power) to 1 (perfect predictive power). It can be used as an alternative to the correlation (matrix). The score is calculated using one variable trying to predict the target variable. In python, PP score can be calculated using <a href="https://pypi.org/project/ppscore/">ppscore</a> library.</p> <div class="l-body"> <iframe src="/assets/plotly/eda/ppscore.html" frameborder="0" scrolling="no" height="600px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <details> <summary>Click me to see the code</summary> <h5 id="ppscore-plot">PPscore plot</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">ppscore</span> <span class="k">as</span> <span class="n">pps</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">matrix_df</span> <span class="o">=</span> <span class="n">pps</span><span class="p">.</span><span class="nf">matrix</span><span class="p">(</span><span class="n">target_data</span><span class="p">.</span><span class="nf">dropna</span><span class="p">())[[</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ppscore</span><span class="sh">'</span><span class="p">]].</span><span class="nf">pivot</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="sh">'</span><span class="s">ppscore</span><span class="sh">'</span><span class="p">)</span>

<span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">triu</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">ones_like</span><span class="p">(</span><span class="n">matrix_df</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">))</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="nc">Heatmap</span><span class="p">(</span>
        <span class="n">z</span><span class="o">=</span><span class="n">matrix_df</span><span class="p">.</span><span class="nf">mask</span><span class="p">(</span><span class="n">mask</span><span class="p">),</span>
        <span class="n">x</span><span class="o">=</span><span class="n">matrix_df</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span>
        <span class="n">y</span><span class="o">=</span><span class="n">matrix_df</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span>
        <span class="n">colorscale</span><span class="o">=</span><span class="n">px</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">sequential</span><span class="p">.</span><span class="n">Blues</span><span class="p">,</span>
        <span class="n">zmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="n">zmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">layout</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="nc">Layout</span><span class="p">(</span>
    <span class="n">title_text</span><span class="o">=</span><span class="sh">'</span><span class="s">Asset PPsore Matrix</span><span class="sh">'</span><span class="p">,</span> 
    <span class="n">title_x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> 
    <span class="n">width</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span> 
    <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span>
    <span class="n">xaxis_showgrid</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">yaxis_showgrid</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
      <span class="n">yaxis_autorange</span><span class="o">=</span><span class="sh">'</span><span class="s">reversed</span><span class="sh">'</span>
<span class="p">)</span>

<span class="n">fig</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="nc">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span><span class="n">data</span><span class="p">],</span> <span class="n">layout</span><span class="o">=</span><span class="n">layout</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
   <span class="n">yaxis</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span>
      <span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">'</span><span class="s">Helvetica</span><span class="sh">'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">)</span>
      <span class="p">),</span>
   <span class="n">xaxis</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span>
      <span class="n">tickfont</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="sh">'</span><span class="s">Helvetica</span><span class="sh">'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">)</span>
      <span class="p">)</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div> </div> </details> <h4 id="further-reading">Further reading</h4> <p>These are some of the most popular figures for multivariate visualization, but other types of figures can also be used depending on the specific data and analysis needs.</p> <ul> <li><a href="https://laurentlsantos.github.io/forecasting/exploratory-spatio-temporal-data-analysis-and-visualisation.html">Exploratory Spatio-temporal Data Analysis and Visualisation (with R)</a></li> </ul> <p><a href="https://lbesson.mit-license.org/"><img src="https://img.shields.io/badge/License-MIT-blue.svg?style=plastic" alt="Generic badge"/></a> <a href="https://github.com/aleksei-mashlakov"><img src="https://img.shields.io/badge/acces_au_code-github-black.svg?style=plastic&amp;logo=github" alt="Generic badge"/></a></p>]]></content><author><name>Aleksei Mashlakov</name></author><category term="visualisation"/><summary type="html"><![CDATA[The secret to interactive visualization with plotly]]></summary></entry></feed>